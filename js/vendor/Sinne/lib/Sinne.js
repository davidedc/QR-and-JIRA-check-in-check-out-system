// Generated by CoffeeScript 1.3.1

/*
V 1.0 - Sinne.coffe 
MIT License
(c) Franz Enzenhofer
*/


(function() {
  var Sinne, getUserX;

  Sinne = {};

  (typeof window !== "undefined" && window !== null ? window : module.exports).Sinne = Sinne;

  Sinne.getUserMedia = function(config, success, error) {
    var config_object, config_string, r;
    while (!success) {
      return false;
    }
    while (!error) {
      return false;
    }
    navigator.getUserMedia_ = navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia || navigator.msGetUserMedia;
    if (!!navigator.getUserMedia_) {
      config_object = {};
      config_string = '';
      if (config.video === true) {
        config_object.video = true;
        config_string = 'video';
      }
      if (config.audio === true) {
        config_object.audio = true;
        if (config_string !== '') {
          config_string = config_string + ', ';
        }
        config_string = config_string + 'audio';
      }
      try {
        r = navigator.getUserMedia_(config_object, success, error);
      } catch (e) {
        try {
          r = navigator.getUserMedia_(config_string, success, error);
        } catch (e2) {
          error({
            name: 'configuration_syntax_not_supported',
            message: 'could not configure getUserMedia',
            sinne_error_id: 1
          });
          return false;
        }
      }
      return r;
    } else {
      return error({
        name: 'getUsereMedia_not_supported',
        message: 'getUsereMedia is not supported',
        sinne_error_id: 0
      });
    }
  };

  getUserX = function(video_support, audio_support, success, error, options) {
    var default_options, element, key, options_, success_, val, value;
    if (video_support == null) {
      video_support = false;
    }
    if (audio_support == null) {
      audio_support = false;
    }
    if (options == null) {
      options = {};
    }
    if (video_support === true) {
      element = document.createElement('video');
    } else if (audio_support === true) {
      element = document.createElement('audio');
    } else {
      error({
        name: 'neither_audio_nor_video',
        message: 'neither audio nor video support is requested',
        sinne_error_id: 3
      });
      return false;
    }
    success_ = function(stream) {
      var vendorURL, _ref;
      if ((typeof MediaStream !== "undefined" && MediaStream !== null) && stream instanceof MediaStream) {
        element.src = stream;
      } else {
        vendorURL = (_ref = window.URL) != null ? _ref : window.webkitURL;
        element.src = vendorURL ? vendorURL.createObjectURL(stream) : stream;
      }
      return success(element, stream);
    };
    default_options = {
      autoplay: true,
      controls: true,
      init: function(element) {
        element.play();
        return element.addEventListener('error', function(e) {
          return error({
            name: 'init_didnt_work',
            message: 'initialzing the ' + e.srcElement + ' didn\'t work out',
            sinne_error_id: 4
          });
        });
      }
    };
    options_ = {};
    for (key in default_options) {
      val = default_options[key];
      options_[key] = val;
    }
    for (key in options) {
      val = options[key];
      options_[key] = val;
    }
    for (key in options_) {
      value = options_[key];
      element[key] = value;
    }
    if (typeof options_.init === "function") {
      options_.init(element);
    }
    return Sinne.getUserMedia({
      video: video_support,
      audio: audio_support
    }, success_, error);
  };

  Sinne.getUserVideo = function(success, error, options) {
    var audio_support;
    audio_support = false;
    if ((options != null ? options.audio : void 0) === true) {
      audio_support = true;
    }
    return getUserX(true, audio_support, success, error, options);
  };

  Sinne.getUserAudio = function(success, error, options) {
    return getUserX(false, true, success, error, options);
  };

}).call(this);
